// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LAB.DataScanner.Components.Tests.Acceptance.DeploymentService_Vladimir_Chirushin
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DeploymentServiceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "DeploymentService.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DeploymentService", "\tIn order to run my custom services in service fabric\r\n\tI want to rearange files " +
                    "of microservice, create package and deploy it into service fabric.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "DeploymentService")))
            {
                global::LAB.DataScanner.Components.Tests.Acceptance.DeploymentService_Vladimir_Chirushin.DeploymentServiceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Listen for deployment event and reponds to logger about these events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeploymentService")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ignore")]
        public virtual void ListenForDeploymentEventAndRepondsToLoggerAboutTheseEvents()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Listen for deployment event and reponds to logger about these events", null, new string[] {
                        "ignore"});
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("I have no any applications in local service fabric", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("I have no any application types in local service fabric", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And("I have empty database for application configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table1.AddRow(new string[] {
                            "Application_Columns",
                            "1 2 3 4 5"});
                table1.AddRow(new string[] {
                            "Application_Rows",
                            "3"});
                table1.AddRow(new string[] {
                            "Binding_SenderExchange",
                            "CsvToJsonParser"});
                table1.AddRow(new string[] {
                            "Binding_SenderRoutingKeys",
                            "CsvToJsonParser_SimpleTextParser,CsvToJsonParser_SimpleImageParser"});
                table1.AddRow(new string[] {
                            "Binding_ReceiverQueue",
                            "SimpleHttpGetScraper_CsvToJsonParserType"});
#line 10
 testRunner.And("I have in config database application instance \'CsvToJsonParserType\' with this id" +
                        " \'1\' with build version \'20191224.10\' with these properties", ((string)(null)), table1, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table2.AddRow(new string[] {
                            "Application_TargetUrls",
                            "http://ya.ru/ http://google.com/ http://wikipedia.org"});
                table2.AddRow(new string[] {
                            "Binding_SenderExchange",
                            "SimpleHttpGetScraper"});
                table2.AddRow(new string[] {
                            "Binding_SenderRoutingKeys",
                            "SimpleHttpGetScraper_CsvToJsonParser,SimpleHttpGetScraper_SimpleImageParser"});
                table2.AddRow(new string[] {
                            "Binding_ReceiverQueue",
                            "null"});
#line 17
 testRunner.And("I have in config database application instance \'SimpleHttpGetScraperType\' with th" +
                        "is id \'2\' with build version \'20191224.10\' with these properties", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table3.AddRow(new string[] {
                            "Application_TargetUrls",
                            "https://habr.com/ru/ https://www.spbstu.ru/"});
                table3.AddRow(new string[] {
                            "Binding_SenderExchange",
                            "SimpleImageParserType"});
                table3.AddRow(new string[] {
                            "Binding_SenderRoutingKeys",
                            "SimpleImageParserType_CsvToJsonParser,SimpleImageParserType_SimpleImageParser"});
                table3.AddRow(new string[] {
                            "Binding_ReceiverQueue",
                            "SimpleHttpGetScraperType"});
#line 23
 testRunner.And("I have in config database application instance \'SimpleImageParserType\' with this " +
                        "id \'3\' with build version \'20191224.10\' with these properties", ((string)(null)), table3, "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table4.AddRow(new string[] {
                            "Application_Criteria",
                            "Betwen"});
                table4.AddRow(new string[] {
                            "Application_TargetWord",
                            "TestTargetWord"});
                table4.AddRow(new string[] {
                            "Application_StartWord",
                            "TestStartWord"});
                table4.AddRow(new string[] {
                            "Application_StopWord",
                            "TestStopWord"});
                table4.AddRow(new string[] {
                            "Binding_SenderExchange",
                            "SimpleTextParserType"});
                table4.AddRow(new string[] {
                            "Binding_SenderRoutingKeys",
                            "SimpleTextParserType_CsvToJsonParser,SimpleTextParserType_SimpleImageParser"});
                table4.AddRow(new string[] {
                            "Binding_ReceiverQueue",
                            "SimpleHttpGetScraperType"});
#line 29
 testRunner.And("I have in config database application instance \'SimpleTextParserType\' with this i" +
                        "d \'4\' with build version \'20191224.10\' with these properties", ((string)(null)), table4, "And ");
#line hidden
#line 38
 testRunner.And("I have empty folder for sfpkgs here \'C:\\temp\\PackagePreparePlace_VC\\\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table5.AddRow(new string[] {
                            "Config:Binding:ReceiverQueue",
                            "Deployment"});
                table5.AddRow(new string[] {
                            "Config:Application:sfClusterUri",
                            "http://localhost:19080"});
#line 39
 testRunner.And("I have DeploymentService with this parameters", ((string)(null)), table5, "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ComponentId",
                            "DeploymentType"});
                table6.AddRow(new string[] {
                            "1",
                            "Deploy"});
                table6.AddRow(new string[] {
                            "2",
                            "Deploy"});
                table6.AddRow(new string[] {
                            "3",
                            "Deploy"});
                table6.AddRow(new string[] {
                            "4",
                            "Deploy"});
#line 43
 testRunner.And("I have new deployment message into this Deployment exchange with this data", ((string)(null)), table6, "And ");
#line hidden
#line 49
 testRunner.Then("I wait for 180 seconds to check data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
 testRunner.Then("I check if there is instance with this name \'CsvToJsonParserType\' in service fabr" +
                        "ic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.Then("I check if there is instance with this name \'SimpleHttpGetScraperType\' in service" +
                        " fabric", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.Then("I check if there is instance with this name \'SimpleImageParserType\' in service fa" +
                        "bric", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.Then("I check if there is instance with this name \'SimpleTextParserType\' in service fab" +
                        "ric", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.Then("I wait for 60 seconds to check data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
